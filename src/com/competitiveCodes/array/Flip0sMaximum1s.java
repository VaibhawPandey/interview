package com.competitiveCodes.array;

/**
 * Date 12/29/2015
 *
 * @author Tushar Roy
 * <p>
 * Given input array of 0s and 1s and number of flips allowed from 0 to 1, what is maximum consecutive 1s we can have
 * in array
 * <p>
 * Time complexity - O(n)
 * Space complexity - O(1)
 * <p>
 * http://www.geeksforgeeks.org/find-zeroes-to-be-flipped-so-that-number-of-consecutive-1s-is-maximized/
 */
public class Flip0sMaximum1s {

    //Also read MaximumKSumArray.java for better understanding of this problem.

    public int flip0sToMaximizeConsecutive1s( int input[], int flipsAllowed ) {

        int windowStart = 0;
        int countZero = 0;
        int result = 0;
        for (int i = 0; i < input.length- flipsAllowed; i++) {
            if (input[i] == 1) {

                // Max : helps in condition where we have continuous 1's and increasing index i helps in calculating max 1's

                // For input {0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1} : at index 9 or 10. it helps in generating maximum 1's

                // i : denotes end index of window to calculate maximum 1's

                // + 1 : helps to calculate total items such as (end-start + 1)

                result = Math.max(result, i - windowStart + 1);
            } else {
                if (countZero < flipsAllowed) {
                    countZero++;

                    // Here result : max 1's can be generated by flipping total zeros allowed.

                    // i : denotes end index of Window

                    // windowStart : denotes start index of Window [0] by flipping it we can generate max 1's
                    result = Math.max(result, i - windowStart + 1);
                } else {

                    //This loop requires to calculate WindowStart index by comparing '0'.

                    // There will be multiple 0's ,so we keep extending this start window point to calc correct window point

                    while (true) {

                        //Breaking of this loop is done to check in outer loop can we generate max 1's by flipping this '0'

                        if (input[windowStart] == 0) {
                            windowStart++;
                            break;
                        }
                        windowStart++;
                    }
                }
            }
        }
        return result;
    }

    public static void main( String args[] ) {
        int input[] ={0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1};

        Flip0sMaximum1s fm = new Flip0sMaximum1s();
        System.out.print(fm.flip0sToMaximizeConsecutive1s(input, 1));
    }
}
